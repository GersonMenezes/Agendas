//Escolhendo um pivo médio, troca a posição de 2 números que estão à sua esquerda e direita de forma que fique ordenado
void quickSort(int vet[], int left, int right){
    int i, j, tmp;
    i = left;
    j = right;
    int mid = vet[(i+j)/2];
    
   do{
        while(mid>vet[i]){
            i++;
        }
        while(mid<vet[j]){
            j--;
        }
        if(i<=j){
            tmp = vet[i];
            vet[i] = vet[j];
            vet[j] = tmp;
            i++;
            j--;
        }
        
   }while(i<=j);
    if(left<j){
        quickSort(vet, left, j);
    }
    if(i<right){
        quickSort(vet, i, right);
    }
}
//Seleciona o menor e troca com o indice da vez
void selectionSort(int *vet, int n){
    int min, i, j, tmp, min_ind=0;
    for(i=0; i<(n-1); i++){
        min = vet[i];
        for(j=i+1; j<n; j++){
            if(min>vet[j]){
                min = vet[j];
                min_ind = j;
            }
        }
        tmp = vet[i];
        vet[i] = vet[min_ind];
        vet[min_ind] = tmp;
        min_ind = i+1;      // Ficar igual a i caso eles sejam iguais
    }
}

// Percorre o vetor várias vezes trocando as os menores com maiores, ordenando o vetor de trás pra frente
void bubbleSort(int vet[], int n){
    int tmp, i, j;
    int flag;
    for(i=0; i<n-1; i++){
        flag = 1; 
        for(j=0; j < (n-i-1); j++){
            if((vet[j]) > (vet[j+1])){
                tmp = vet[j];
                vet[j] = vet[j+1];
                vet[j+1] = tmp;
                flag = 0;
            }
        }
        if(flag == 1){
            return;
        }
    }
}

void insertionSort(int vet[], int n){
    int tmp, i, j;
    for(j=1; j<n; j++){
        i = j-1;
        tmp = vet[j];
        while(i>=0 && tmp < vet[i]){
            vet[i+1] = vet[i];
            i--;
        }
        vet[i+1] = tmp;
    }
}
