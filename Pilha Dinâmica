// Duvidas
// Como mandar o conteudo de uma struct como argumento. RESPONDIDO.
// Como retornar o conteúdo de um ponteiro de struct por atribuição. RESPONDIDO
// Por que as vezes o typedef não funciona?
// Quando é feito um malloc ou realloc a memória alocada é sequencial? Se não, como funciona p++?

#include <stdio.h>
#include <stdlib.h>

struct aluno{
    int num;
    int name;
};

struct pilha{
    struct aluno *alunos;
    struct aluno *base;
    struct aluno *top;
    int count;
};

void push(struct pilha *p);
void pop(struct pilha *p, struct aluno *item);
void reset(struct pilha *p);
void printOne(struct pilha p);
void printAll(struct pilha *p);
void menu(struct pilha *p);

int main(){
        
     struct pilha *pilha1;
     pilha1 = (struct pilha*) malloc(sizeof(struct pilha));
     reset(pilha1);
     int i = 0, tmp;
     menu(pilha1);
     free(pilha1->alunos);
     free(pilha1);

return 0;
}

void reset(struct pilha *p){
    p->alunos = NULL;
    p->base = NULL;
    p->top = NULL;
    p->count = 0;
}

void menu(struct pilha *p){
    int i = 1;
    struct aluno alunoAux;
    while(i!=0){
    
        printf("\n1. To put a element");
        printf("\n2. To take a element");
        printf("\n3. To show the last element");
        printf("\n4. To show all element");
        printf("\n0. To exit");
        printf("\nChoose one of the following options: ");
        scanf("%d", &i);
        if(i == 1) push(p);
        else if(i==2){
            pop(p, &alunoAux);
            printf("\nThe student took is: %d\n", alunoAux.num);
        }
        else if(i==3) printOne(*p);
        else if(i==4) printAll(p);
        else if(i==0) return;
        else printf("\nThis Option do not exist\n");
    }
}

void push(struct pilha *p){
    int novo;
    p->count ++;
    
    p->alunos = (struct aluno*) realloc(p->alunos, sizeof(struct aluno)*(p->count));
      if(!(p->alunos)){
          printf("No memory available!");
          p->count--;
          return;
      }
      
    printf("Tell the number of the element: ");
    scanf("%d", &novo);
    p->top = p->alunos + (sizeof(struct aluno)*((p->count)-1));
    p->base = p->alunos;
    p->top->num = novo;
    printf("\nThe element %d was add with success\n", novo);
}

void pop(struct pilha *p, struct aluno *item){
    
    if(p->top == NULL)
        printf("Empty stack");
    
    else if(p->top == p->base){
        *item = *(p->top);
        p->count --;
        p->top = NULL;
    }
    else{
        *item = *(p->top);
        p->count --;
        p->alunos = (struct aluno*) realloc(p->alunos, sizeof(struct aluno)*(p->count));
        p->base = p->alunos;
        p->top = p->alunos + (sizeof(struct aluno)*(p->count));
    }
}

void printOne(struct pilha p){
        
    if(p.top == NULL) printf("\nEmpty stack\n");
    else{
        printf("The element is: %d\n", p.top->num);
    }
}

void printAll(struct pilha *p){
    
    if(p->top == NULL){
         printf("\nEmpty stack\n");
         return;
    }
    int i = p->count;
    struct aluno *aux = p->top;
    printf("The elements are: \n");
    while(i>0){
        printf("%d\n", aux->num);
        aux = aux - (sizeof(struct aluno));
        i--;
    }
}
