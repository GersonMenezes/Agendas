// Duvidas
// Como mandar o conteudo de uma struct como argumento
// Por que as vezes o typedef n√£o funciona?

#include <stdio.h>
#include <stdlib.h>

struct aluno{
    int num;
    int name;
};

struct pilha{
    struct aluno *alunos;
    struct aluno *base;
    struct aluno *top;
    int count;
};

void push(struct pilha *p);
void pop(struct pilha *p, struct aluno *item);
void reset(struct pilha *p);
void printOne(struct pilha p);
void menu(struct pilha *p);

int main(){
        
     struct pilha *pilha1;
     pilha1 = (struct pilha*) malloc(sizeof(struct pilha));
     reset(pilha1);
     int i = 0, tmp;
     menu(pilha1);
     free(pilha1);

return 0;
}

void reset(struct pilha *p){
    p->alunos = NULL;
    p->base = NULL;
    p->top = NULL;
    p->count = 0;
}

void menu(struct pilha *p){
    int i = 1;
    struct aluno alunoAux;
    while(i!=0){
        printf("Choose one of the following options: ");
        printf("\n1. To put a element");
        printf("\n2. To take a element");
        printf("\n3. To show the last element");
        printf("\n4. To show all element");
        printf("\n0. To exit");
        scanf("%d", &i);
        if(i == 1) push(p);
        else if(i==2){
            pop(p, &alunoAux);
            printf("The student took is: %d\n", alunoAux.num);
        }
        else if(i==3) printOne(*p);
       // else if(i==4) printAll();
        else if(i==0) return;
        else printf("This Option do not exist");
    }
}

void push(struct pilha *p){
    int novo;
    printf("Tell the number of the first element: ");
    scanf("%d", &novo);
    p->count ++;
    
    p->alunos = (struct aluno*) realloc(p->alunos, sizeof(struct aluno)*(p->count));
      if(!(p->alunos)) printf("No memory available!");
    p->top = p->alunos + (sizeof(struct aluno)*((p->count)-1));
    p->base = p->alunos;
    p->top->num = novo;
}

void pop(struct pilha *p, struct aluno *item){
    
    if(p->top == NULL)
        printf("Empty stack");
    
    else if(p->top == p->base){
        item = p->top;
        p->top = NULL;
    }
    else{
        item = p->top;
        p->count --;
        p->alunos = (struct aluno*) realloc(p->alunos, sizeof(struct aluno)*(p->count));
        p->base = p->alunos;
        p->top = p->alunos + (sizeof(struct aluno)*(p->count));
    }
}

void printOne(struct pilha p){
    
    if(p.top == NULL) printf("Empty stack");
    else{
        printf("The element is: %d\n", p.top->num);
    }
}
